{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","serviceWorker.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","onClick","Section","title","children","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","setState","totalFeedBack","this","Math","floor","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mQAuBeA,G,MApBS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,OACE,6BACE,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgB,UAArD,QAGA,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgB,aAArD,WAGA,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgB,SAArD,UCTAG,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,iCACE,4BAAKD,GACJC,IAQPF,EAAQG,aAAe,CACrBF,MAAO,SAEMD,QCfTI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,4BACE,4BACE,oCAAUJ,IAEZ,4BACE,uCAAaC,IAEf,4BACE,mCAASC,IAEX,4BACE,qCAAWC,IAEb,4BACE,iDAAuBC,EAAvB,QAaRL,EAAWD,aAAe,CACxBE,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAEPL,QCpCTM,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,2BAAIA,IAMbD,EAAaP,aAAe,CAC1BQ,QAAS,gBAGID,QCyCAE,E,4MA/CbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPV,gBAAkB,SAACC,GACjB,EAAKgB,UAAS,SAACD,GACb,OAAO,eACJf,EAAOe,EAAMf,GAAQ,O,EAK5BiB,cAAgB,WAAO,IAAD,EACW,EAAKF,MACpC,OAFoB,EACZR,KADY,EACNC,QADM,EACGC,K,uDAIf,IAAD,EACwBS,KAAKH,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBQ,EAAgBC,KAAKD,gBACrBN,EACJM,EAAgB,EAAIE,KAAKC,MAAOb,EAAOU,EAAiB,KAAO,EACjE,OACE,yBAAKI,UAAU,OACb,kBAAC,EAAD,CAASlB,MAAO,yBACd,kBAAC,EAAD,CAAiBJ,gBAAiBmB,KAAKnB,mBAEzC,kBAAC,EAAD,CAASI,MAAO,cACbc,EAAgB,EACf,kBAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,EACPN,mBAAoBA,IAGtB,kBAAC,EAAD,CAAcE,QAAS,4B,GAxCjBS,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,a","file":"static/js/main.56c72d7a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={() => onLeaveFeedback(\"good\")}>\r\n        Good\r\n      </button>\r\n      <button type=\"button\" onClick={() => onLeaveFeedback(\"neutral\")}>\r\n        Neutral\r\n      </button>\r\n      <button type=\"button\" onClick={() => onLeaveFeedback(\"bad\")}>\r\n        Bad\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nSection.defaultProps = {\r\n  title: \"title\",\r\n};\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <p>Good: {good}</p>\r\n      </li>\r\n      <li>\r\n        <p>Neutral: {neutral}</p>\r\n      </li>\r\n      <li>\r\n        <p>Bad: {bad}</p>\r\n      </li>\r\n      <li>\r\n        <p>Total: {total}</p>\r\n      </li>\r\n      <li>\r\n        <p>Positive feedback: {positivePercentage}%</p>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\nStatistics.defaultProps = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n  total: 0,\r\n  positivePercentage: 0,\r\n};\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nNotification.defaultProps = {\r\n  message: \"Notification\",\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notification from \"./components/Notification/Notification.jsx\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (type) => {\n    this.setState((state) => {\n      return {\n        [type]: state[type] + 1,\n      };\n    });\n  };\n\n  totalFeedBack = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const totalFeedBack = this.totalFeedBack();\n    const positivePercentage =\n      totalFeedBack > 0 ? Math.floor((good / totalFeedBack) * 100) : 0;\n    return (\n      <div className=\"App\">\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n        <Section title={\"Statistics\"}>\n          {totalFeedBack > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalFeedBack}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message={\"No feedback given\"} />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}